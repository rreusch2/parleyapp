// Critical fixes for prediction data safety to prevent app crashes

// 1. Sanitize prediction data before storing in database
export const sanitizePredictionData = (prediction) => {
  return {
    id: prediction.id || null,
    user_id: prediction.user_id || null,
    match_teams: prediction.match_teams || 'Unknown vs Unknown',
    pick: prediction.pick || 'Pick unavailable',
    odds: prediction.odds || 'N/A', 
    confidence: Math.max(0, Math.min(100, Number(prediction.confidence) || 0)),
    sport: prediction.sport || 'MLB',
    event_time: prediction.event_time || new Date().toISOString(),
    reasoning: prediction.reasoning || 'AI-generated prediction',
    value_percentage: Number(prediction.value_percentage) || 0,
    roi_estimate: Number(prediction.roi_estimate) || 0,
    status: prediction.status || 'pending',
    bet_type: prediction.bet_type || 'moneyline',
    created_at: prediction.created_at || new Date().toISOString(),
    updated_at: new Date().toISOString()
  };
};

// 2. Validate user tier and pick limits before generating predictions
export const validateUserPickLimits = (profile) => {
  const now = new Date();
  const isWelcomeBonusActive = profile.welcome_bonus_claimed && 
    profile.welcome_bonus_expires_at && 
    new Date(profile.welcome_bonus_expires_at) > now;

  let maxTeamPicks, maxPropPicks, tierName;

  if (profile.subscription_tier === 'pro') {
    maxTeamPicks = 10;
    maxPropPicks = 10; 
    tierName = 'pro';
  } else if (isWelcomeBonusActive) {
    maxTeamPicks = 3;
    maxPropPicks = 2;
    tierName = 'welcome_bonus';
  } else {
    maxTeamPicks = 1;
    maxPropPicks = 1;
    tierName = 'free';
  }

  return {
    maxTeamPicks,
    maxPropPicks,
    totalMaxPicks: maxTeamPicks + maxPropPicks,
    tierName,
    isWelcomeBonusActive
  };
};

// 3. Safe prediction response formatter
export const formatPredictionResponse = (predictions, userTier) => {
  if (!Array.isArray(predictions)) {
    console.error('Predictions is not an array:', predictions);
    return [];
  }

  return predictions.map(prediction => {
    const sanitized = sanitizePredictionData(prediction);
    
    return {
      id: sanitized.id,
      match: sanitized.match_teams,
      pick: sanitized.pick,
      odds: sanitized.odds,
      confidence: sanitized.confidence,
      sport: sanitized.sport,
      eventTime: sanitized.event_time,
      reasoning: sanitized.reasoning,
      value: sanitized.value_percentage,
      roi_estimate: sanitized.roi_estimate,
      status: sanitized.status,
      type: sanitized.bet_type === 'player_prop' ? 'props' : 'team',
      category: sanitized.bet_type === 'player_prop' ? 'Player Props' : 'Team Picks',
      created_at: sanitized.created_at
    };
  });
};

// 4. Emergency fallback when no predictions available
export const createFallbackPredictions = (userLimits) => {
  const fallbackPredictions = [];
  
  // Create safe fallback team picks
  for (let i = 0; i < userLimits.maxTeamPicks; i++) {
    fallbackPredictions.push({
      id: `fallback-team-${i}`,
      match: 'Predictions Loading...',
      pick: 'Check back soon for AI picks',
      odds: 'N/A',
      confidence: 0,
      sport: 'MLB',
      eventTime: new Date().toISOString(),
      reasoning: 'Predictions are being generated by our AI system',
      value: 0,
      roi_estimate: 0,
      status: 'pending',
      type: 'team',
      category: 'Team Picks',
      created_at: new Date().toISOString()
    });
  }
  
  // Create safe fallback prop picks
  for (let i = 0; i < userLimits.maxPropPicks; i++) {
    fallbackPredictions.push({
      id: `fallback-prop-${i}`,
      match: 'Player Props Loading...',
      pick: 'Check back soon for AI picks',
      odds: 'N/A',
      confidence: 0,
      sport: 'MLB',
      eventTime: new Date().toISOString(),
      reasoning: 'Predictions are being generated by our AI system',
      value: 0,
      roi_estimate: 0,
      status: 'pending',
      type: 'props', 
      category: 'Player Props',
      created_at: new Date().toISOString()
    });
  }
  
  return fallbackPredictions;
};
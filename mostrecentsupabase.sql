-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ad_reward_grants (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  ad_network text NOT NULL DEFAULT 'admob'::text,
  ad_unit_id text,
  reward_item text,
  reward_amount integer NOT NULL DEFAULT 1,
  transaction_id text UNIQUE,
  ssv_signature text,
  verified boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  CONSTRAINT ad_reward_grants_pkey PRIMARY KEY (id),
  CONSTRAINT ad_reward_grants_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.admin_chats (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  content text NOT NULL CHECK (char_length(content) > 0),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT admin_chats_pkey PRIMARY KEY (id),
  CONSTRAINT admin_chats_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.admin_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  command text NOT NULL,
  executed_at timestamp with time zone NOT NULL DEFAULT now(),
  success boolean NOT NULL DEFAULT false,
  metadata jsonb,
  error_text text,
  CONSTRAINT admin_logs_pkey PRIMARY KEY (id),
  CONSTRAINT admin_logs_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.ai_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title character varying NOT NULL,
  description text NOT NULL,
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['trend'::character varying::text, 'value'::character varying::text, 'alert'::character varying::text, 'prediction'::character varying::text])),
  impact character varying NOT NULL CHECK (impact::text = ANY (ARRAY['high'::character varying::text, 'medium'::character varying::text, 'low'::character varying::text])),
  data jsonb,
  is_global boolean DEFAULT false,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_insights_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_predictions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  match_teams character varying NOT NULL,
  pick character varying NOT NULL,
  odds character varying NOT NULL,
  confidence integer CHECK (confidence >= 0 AND confidence <= 100),
  sport character varying NOT NULL,
  event_time timestamp with time zone NOT NULL,
  reasoning text,
  value_percentage numeric,
  roi_estimate numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'cancelled'::character varying::text])),
  game_id character varying,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  bet_type character varying DEFAULT 'moneyline'::character varying,
  player_id uuid,
  prop_market_type character varying,
  line_value numeric,
  prediction_value numeric,
  is_parlay_leg boolean DEFAULT false,
  parlay_id uuid,
  kelly_stake numeric,
  expected_value numeric,
  risk_level character varying,
  implied_probability numeric,
  fair_odds character varying,
  key_factors jsonb,
  CONSTRAINT ai_predictions_pkey PRIMARY KEY (id),
  CONSTRAINT ai_predictions_parlay_id_fkey FOREIGN KEY (parlay_id) REFERENCES public.parlays(id),
  CONSTRAINT ai_predictions_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.ai_reports (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  report_type character varying NOT NULL DEFAULT 'daily'::character varying,
  content text NOT NULL,
  metadata jsonb,
  generated_at timestamp with time zone NOT NULL DEFAULT now(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT ai_reports_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_trends (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  trend_text text NOT NULL,
  trend_type character varying NOT NULL CHECK (trend_type::text = ANY (ARRAY['player_prop'::character varying::text, 'team'::character varying::text])),
  sport character varying NOT NULL,
  confidence_score numeric NOT NULL CHECK (confidence_score >= 0::numeric AND confidence_score <= 100::numeric),
  data jsonb,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_global boolean DEFAULT false,
  scraped_prop_data jsonb DEFAULT '{}'::jsonb,
  player_id uuid,
  full_player_name text,
  prop_performance_stats jsonb DEFAULT '{}'::jsonb,
  data_sources ARRAY DEFAULT '{}'::text[],
  title text,
  description text,
  insight text,
  supporting_data text,
  metadata jsonb DEFAULT '{}'::jsonb,
  headline text,
  chart_data jsonb DEFAULT '{}'::jsonb,
  trend_category text DEFAULT 'general'::text,
  key_stats jsonb DEFAULT '{}'::jsonb,
  visual_data jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT ai_trends_pkey PRIMARY KEY (id),
  CONSTRAINT ai_trends_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.api_keys (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  key_hash text NOT NULL UNIQUE,
  key_prefix text NOT NULL,
  name text NOT NULL DEFAULT 'Default API Key'::text,
  is_active boolean DEFAULT true,
  current_month_usage integer DEFAULT 0,
  created_at timestamp with time zone DEFAULT now(),
  last_used_at timestamp with time zone,
  expires_at timestamp with time zone,
  CONSTRAINT api_keys_pkey PRIMARY KEY (id),
  CONSTRAINT api_keys_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.api_usage (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  api_key_id uuid,
  endpoint text NOT NULL,
  query_text text,
  response_time_ms integer,
  status_code integer,
  timestamp timestamp with time zone DEFAULT now(),
  month text NOT NULL,
  CONSTRAINT api_usage_pkey PRIMARY KEY (id),
  CONSTRAINT api_usage_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT api_usage_api_key_id_fkey FOREIGN KEY (api_key_id) REFERENCES public.api_keys(id)
);
CREATE TABLE public.automation_runs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  flow_key text NOT NULL,
  status text NOT NULL DEFAULT 'started'::text,
  started_at timestamp with time zone NOT NULL DEFAULT now(),
  ended_at timestamp with time zone,
  duration_ms integer,
  payload_json jsonb,
  error_text text,
  created_by uuid,
  CONSTRAINT automation_runs_pkey PRIMARY KEY (id),
  CONSTRAINT automation_runs_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.automation_webhooks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  flow_key text NOT NULL UNIQUE,
  description text,
  enabled boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT automation_webhooks_pkey PRIMARY KEY (id)
);
CREATE TABLE public.bookmakers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  bookmaker_key character varying NOT NULL UNIQUE,
  bookmaker_name character varying NOT NULL,
  region character varying,
  is_active boolean DEFAULT true,
  affiliate_link text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bookmakers_pkey PRIMARY KEY (id)
);
CREATE TABLE public.daily_insights_data (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  data_type character varying NOT NULL,
  team_name character varying,
  player_name character varying,
  data jsonb NOT NULL,
  date_collected date DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_insights_data_pkey PRIMARY KEY (id)
);
CREATE TABLE public.daily_professor_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  insight_text text NOT NULL,
  insight_order integer NOT NULL,
  date_generated date DEFAULT CURRENT_DATE,
  created_at timestamp with time zone DEFAULT now(),
  title text,
  description text,
  category text DEFAULT 'research'::text,
  confidence integer DEFAULT 75 CHECK (confidence >= 0 AND confidence <= 100),
  impact text DEFAULT 'medium'::text CHECK (impact = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  research_sources ARRAY DEFAULT '{}'::text[],
  game_info jsonb,
  teams ARRAY DEFAULT '{}'::text[],
  CONSTRAINT daily_professor_insights_pkey PRIMARY KEY (id)
);
CREATE TABLE public.enhanced_data (
  id integer NOT NULL DEFAULT nextval('enhanced_data_id_seq'::regclass),
  source character varying,
  data_type character varying,
  content jsonb,
  timestamp timestamp without time zone,
  confidence double precision,
  sport character varying,
  teams ARRAY,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT enhanced_data_pkey PRIMARY KEY (id)
);
CREATE TABLE public.enhanced_predictions (
  id integer NOT NULL DEFAULT nextval('enhanced_predictions_id_seq'::regclass),
  prediction_type character varying NOT NULL,
  pick text NOT NULL,
  odds character varying,
  confidence numeric NOT NULL,
  match_teams ARRAY,
  model_used character varying DEFAULT 'grok-4'::character varying,
  enhanced_system boolean DEFAULT true,
  scrapy_insights_used boolean DEFAULT false,
  scrapy_edge text,
  research_insights_count integer DEFAULT 0,
  player_name character varying,
  prop_type character varying,
  recommendation character varying,
  line numeric,
  statmuse_data_used boolean DEFAULT false,
  web_search_data_used boolean DEFAULT false,
  scrapy_news_count integer DEFAULT 0,
  scrapy_stats_count integer DEFAULT 0,
  scrapy_performance_count integer DEFAULT 0,
  ai_reasoning text,
  confidence_factors ARRAY,
  risk_assessment text,
  expected_value numeric,
  generated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  agent_version character varying,
  processing_time_ms integer,
  data_freshness_score numeric,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  actual_outcome character varying,
  outcome_recorded_at timestamp without time zone,
  profit_loss numeric,
  CONSTRAINT enhanced_predictions_pkey PRIMARY KEY (id)
);
CREATE TABLE public.feedback (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  email text NOT NULL,
  feedback_type text NOT NULL CHECK (feedback_type = ANY (ARRAY['general'::text, 'feature_request'::text, 'bug_report'::text, 'ai_suggestion'::text, 'ui_improvement'::text])),
  message text NOT NULL,
  rating integer CHECK (rating >= 1 AND rating <= 5),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT feedback_pkey PRIMARY KEY (id),
  CONSTRAINT feedback_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.generated_marketing_assets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  prediction_id uuid,
  flow_key text NOT NULL DEFAULT 'post_top_pick_social'::text,
  sport text,
  match_teams text,
  pick text,
  confidence numeric,
  caption_short text NOT NULL,
  caption_long text NOT NULL,
  hashtags ARRAY,
  image_url text,
  video_url text,
  raw_json jsonb,
  status text NOT NULL DEFAULT 'draft'::text,
  created_by uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT generated_marketing_assets_pkey PRIMARY KEY (id),
  CONSTRAINT generated_marketing_assets_created_by_fkey FOREIGN KEY (created_by) REFERENCES public.profiles(id)
);
CREATE TABLE public.giveaway_entries (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid,
  entry_method text NOT NULL CHECK (entry_method = ANY (ARRAY['subscription'::text, 'referral'::text, 'social_share'::text, 'app_review'::text, 'daily_login'::text])),
  entry_date timestamp with time zone DEFAULT now(),
  is_valid boolean DEFAULT true,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT giveaway_entries_pkey PRIMARY KEY (id),
  CONSTRAINT giveaway_entries_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.historical_games (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_game_id character varying NOT NULL UNIQUE,
  sport character varying NOT NULL,
  league character varying NOT NULL,
  season character varying,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  game_date timestamp with time zone NOT NULL,
  home_score integer NOT NULL,
  away_score integer NOT NULL,
  ml_home_close numeric,
  ml_away_close numeric,
  spread_line_close numeric,
  spread_home_odds_close numeric,
  spread_away_odds_close numeric,
  total_line_close numeric,
  total_over_odds_close numeric,
  total_under_odds_close numeric,
  ml_home_open numeric,
  ml_away_open numeric,
  spread_line_open numeric,
  total_line_open numeric,
  venue character varying,
  attendance integer,
  weather_conditions jsonb,
  source character varying DEFAULT 'theodds_api'::character varying,
  ingested_at timestamp with time zone DEFAULT now(),
  CONSTRAINT historical_games_pkey PRIMARY KEY (id)
);
CREATE TABLE public.historical_odds (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  bookmaker_id uuid,
  market_type_id uuid,
  opening_line jsonb NOT NULL,
  closing_line jsonb NOT NULL,
  line_movements jsonb DEFAULT '[]'::jsonb,
  result character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT historical_odds_pkey PRIMARY KEY (id),
  CONSTRAINT historical_odds_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT historical_odds_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id),
  CONSTRAINT historical_odds_market_type_id_fkey FOREIGN KEY (market_type_id) REFERENCES public.market_types(id)
);
CREATE TABLE public.injury_reports (
  id bigint NOT NULL DEFAULT nextval('injury_reports_id_seq'::regclass),
  player_name character varying NOT NULL,
  external_player_id character varying,
  team_name character varying NOT NULL,
  position character varying,
  injury_status character varying NOT NULL,
  estimated_return_date date,
  description text,
  sport character varying NOT NULL,
  source character varying NOT NULL DEFAULT 'ESPN_SCRAPE'::character varying,
  source_url text,
  scraped_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT injury_reports_pkey PRIMARY KEY (id)
);
CREATE TABLE public.live_games (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_game_id character varying NOT NULL UNIQUE,
  sport character varying NOT NULL,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  event_time timestamp with time zone NOT NULL,
  odds jsonb,
  game_status character varying DEFAULT 'scheduled'::character varying,
  venue character varying,
  weather jsonb,
  injuries jsonb,
  line_movements jsonb,
  last_updated timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT live_games_pkey PRIMARY KEY (id)
);
CREATE TABLE public.market_types (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  market_key character varying NOT NULL UNIQUE,
  market_name character varying NOT NULL,
  market_category character varying,
  sport_key character varying,
  description text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT market_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.mlb_game_players (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_id uuid,
  player_id uuid,
  is_home_team boolean NOT NULL,
  game_date timestamp with time zone NOT NULL,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  home_team_abbrev character varying,
  away_team_abbrev character varying,
  player_team_abbrev character varying,
  predicted_hits double precision,
  predicted_home_runs double precision,
  predicted_rbis double precision,
  predicted_strikeouts double precision,
  confidence_score double precision,
  actual_hits integer,
  actual_home_runs integer,
  actual_rbis integer,
  actual_strikeouts integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT mlb_game_players_pkey PRIMARY KEY (id),
  CONSTRAINT mlb_game_players_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.historical_games(id),
  CONSTRAINT mlb_game_players_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.mlb_team_lookup (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  team_name_original character varying NOT NULL UNIQUE,
  team_name_abbrev character varying NOT NULL,
  team_name_full character varying,
  city character varying,
  mascot character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT mlb_team_lookup_pkey PRIMARY KEY (id)
);
CREATE TABLE public.odds_data (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  bookmaker_id uuid,
  market_type_id uuid,
  outcome_name character varying,
  outcome_price numeric,
  outcome_point numeric,
  implied_probability numeric,
  is_best_odds boolean DEFAULT false,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT odds_data_pkey PRIMARY KEY (id),
  CONSTRAINT odds_data_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT odds_data_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id),
  CONSTRAINT odds_data_market_type_id_fkey FOREIGN KEY (market_type_id) REFERENCES public.market_types(id)
);
CREATE TABLE public.parlays (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  parlay_name character varying,
  total_legs integer NOT NULL,
  combined_odds character varying,
  decimal_odds numeric,
  stake_amount numeric,
  potential_payout numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'cancelled'::character varying::text, 'pushed'::character varying::text])),
  legs_won integer DEFAULT 0,
  legs_lost integer DEFAULT 0,
  legs_pending integer,
  is_same_game_parlay boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT parlays_pkey PRIMARY KEY (id)
);
CREATE TABLE public.payments (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  stripe_payment_intent_id character varying NOT NULL UNIQUE,
  amount integer NOT NULL,
  currency character varying NOT NULL DEFAULT 'usd'::character varying,
  status character varying NOT NULL DEFAULT 'pending'::character varying,
  subscription_type character varying,
  customer_email character varying,
  customer_name character varying,
  stripe_customer_id character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT payments_pkey PRIMARY KEY (id),
  CONSTRAINT payments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.player_game_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  player_id uuid,
  minutes_played numeric,
  stats jsonb NOT NULL,
  fantasy_points numeric,
  created_at timestamp with time zone DEFAULT now(),
  betting_results jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT player_game_stats_pkey PRIMARY KEY (id),
  CONSTRAINT player_game_stats_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_game_stats_bad_backup (
  id uuid,
  event_id uuid,
  player_id uuid,
  minutes_played numeric,
  stats jsonb,
  fantasy_points numeric,
  created_at timestamp with time zone,
  betting_results jsonb
);
CREATE TABLE public.player_headshots (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid NOT NULL,
  sportsdata_player_id integer,
  headshot_url text NOT NULL,
  thumbnail_url text,
  source character varying DEFAULT 'sportsdata_io'::character varying,
  image_width integer,
  image_height integer,
  file_size integer,
  is_active boolean DEFAULT true,
  last_updated timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_headshots_pkey PRIMARY KEY (id),
  CONSTRAINT player_headshots_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_prop_markets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid,
  game_id character varying NOT NULL,
  market_type character varying NOT NULL,
  line_value numeric NOT NULL,
  over_odds character varying,
  under_odds character varying,
  sportsbook character varying,
  is_active boolean DEFAULT true,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_prop_markets_pkey PRIMARY KEY (id),
  CONSTRAINT player_prop_markets_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_prop_types (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  prop_key character varying NOT NULL UNIQUE,
  prop_name character varying NOT NULL,
  sport_key character varying,
  stat_category character varying,
  unit character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_prop_types_pkey PRIMARY KEY (id),
  CONSTRAINT player_prop_types_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.player_props (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid,
  player_name character varying NOT NULL,
  prop_type character varying NOT NULL,
  line double precision,
  over_odds double precision,
  under_odds double precision,
  bookmaker character varying,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  team character varying,
  CONSTRAINT player_props_pkey PRIMARY KEY (id),
  CONSTRAINT player_props_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id)
);
CREATE TABLE public.player_props_odds (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  player_id uuid,
  prop_type_id uuid,
  bookmaker_id uuid,
  line numeric NOT NULL,
  over_odds numeric,
  under_odds numeric,
  implied_prob_over numeric,
  implied_prob_under numeric,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_props_odds_pkey PRIMARY KEY (id),
  CONSTRAINT player_props_odds_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT player_props_odds_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id),
  CONSTRAINT player_props_odds_prop_type_id_fkey FOREIGN KEY (prop_type_id) REFERENCES public.player_prop_types(id),
  CONSTRAINT player_props_odds_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id)
);
CREATE TABLE public.player_props_odds_bad_backup (
  id uuid,
  event_id uuid,
  player_id uuid,
  prop_type_id uuid,
  bookmaker_id uuid,
  line numeric,
  over_odds numeric,
  under_odds numeric,
  implied_prob_over numeric,
  implied_prob_under numeric,
  last_update timestamp with time zone,
  created_at timestamp with time zone
);
CREATE TABLE public.player_recent_stats (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid,
  player_name character varying NOT NULL,
  sport character varying NOT NULL,
  team character varying NOT NULL,
  game_date date NOT NULL,
  opponent character varying NOT NULL,
  is_home boolean NOT NULL DEFAULT false,
  hits integer DEFAULT 0,
  at_bats integer DEFAULT 0,
  home_runs integer DEFAULT 0,
  rbis integer DEFAULT 0,
  runs_scored integer DEFAULT 0,
  stolen_bases integer DEFAULT 0,
  strikeouts integer DEFAULT 0,
  walks integer DEFAULT 0,
  total_bases integer DEFAULT 0,
  points integer DEFAULT 0,
  rebounds integer DEFAULT 0,
  assists integer DEFAULT 0,
  steals integer DEFAULT 0,
  blocks integer DEFAULT 0,
  three_pointers integer DEFAULT 0,
  innings_pitched numeric DEFAULT 0,
  strikeouts_pitcher integer DEFAULT 0,
  hits_allowed integer DEFAULT 0,
  walks_allowed integer DEFAULT 0,
  earned_runs integer DEFAULT 0,
  game_result character varying,
  minutes_played integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  passing_yards integer DEFAULT 0,
  rushing_yards integer DEFAULT 0,
  receiving_yards integer DEFAULT 0,
  receptions integer DEFAULT 0,
  passing_tds integer DEFAULT 0,
  rushing_tds integer DEFAULT 0,
  receiving_tds integer DEFAULT 0,
  significant_strikes integer DEFAULT 0,
  takedowns integer DEFAULT 0,
  CONSTRAINT player_recent_stats_pkey PRIMARY KEY (id),
  CONSTRAINT player_recent_stats_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_season_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  player_id uuid,
  season character varying NOT NULL,
  games_played integer DEFAULT 0,
  stats_avg jsonb NOT NULL,
  stats_total jsonb NOT NULL,
  recent_form jsonb DEFAULT '{}'::jsonb,
  home_away_splits jsonb DEFAULT '{}'::jsonb,
  opponent_splits jsonb DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_season_stats_pkey PRIMARY KEY (id),
  CONSTRAINT player_season_stats_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_statistics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid,
  game_id character varying,
  date date NOT NULL,
  sport character varying NOT NULL,
  season character varying,
  stats jsonb NOT NULL,
  game_context jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_statistics_pkey PRIMARY KEY (id),
  CONSTRAINT player_statistics_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_trends_data (
  player_id uuid NOT NULL,
  player_name character varying NOT NULL,
  team_name character varying,
  sport_key character varying NOT NULL,
  position character varying,
  games_played bigint DEFAULT 0,
  recent_games_count bigint DEFAULT 0,
  last_game_date date,
  avg_fantasy_points numeric,
  avg_hits numeric,
  avg_home_runs numeric,
  avg_rbis numeric,
  avg_runs numeric,
  avg_strikeouts numeric,
  avg_walks numeric,
  avg_total_bases numeric,
  avg_stolen_bases numeric,
  batting_average numeric,
  avg_strikeouts_pitched numeric,
  avg_hits_allowed numeric,
  avg_walks_allowed numeric,
  avg_earned_runs numeric,
  avg_innings_pitched numeric,
  era numeric,
  avg_points numeric,
  avg_rebounds numeric,
  avg_assists numeric,
  avg_steals numeric,
  avg_blocks numeric,
  avg_turnovers numeric,
  avg_three_pointers numeric,
  avg_minutes numeric,
  field_goal_percentage numeric,
  three_point_percentage numeric,
  form_trend character varying,
  trend_direction character varying,
  confidence_score numeric,
  over_under_trends jsonb,
  betting_value_score numeric,
  last_updated timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_trends_data_pkey PRIMARY KEY (player_id),
  CONSTRAINT player_trends_data_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.players (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_player_id character varying NOT NULL UNIQUE,
  name character varying NOT NULL CHECK (name::text !~ '^[A-Za-z]\.[A-Za-z][A-Za-z''-]*$'::text),
  position character varying,
  team character varying,
  sport character varying NOT NULL,
  jersey_number integer,
  active boolean DEFAULT true,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  player_key character varying NOT NULL UNIQUE,
  player_name character varying NOT NULL,
  team_id uuid,
  sport_key character varying,
  status character varying DEFAULT 'active'::character varying,
  espn_player_id character varying,
  CONSTRAINT players_pkey PRIMARY KEY (id),
  CONSTRAINT players_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id),
  CONSTRAINT players_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.players_bad_backup (
  id uuid,
  external_player_id character varying,
  name character varying,
  position character varying,
  team character varying,
  sport character varying,
  jersey_number integer,
  active boolean,
  metadata jsonb,
  created_at timestamp with time zone,
  updated_at timestamp with time zone,
  player_key character varying,
  player_name character varying,
  team_id uuid,
  sport_key character varying,
  status character varying
);
CREATE TABLE public.predictions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  event_id uuid,
  sport text NOT NULL,
  matchup text NOT NULL,
  pick text NOT NULL,
  odds text NOT NULL,
  confidence numeric CHECK (confidence >= 0::numeric AND confidence <= 100::numeric),
  analysis text,
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'won'::text, 'lost'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT predictions_pkey PRIMARY KEY (id),
  CONSTRAINT predictions_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT predictions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.professor_lock_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  insight_text text NOT NULL,
  insight_type character varying DEFAULT 'daily_trend'::character varying,
  confidence_score integer CHECK (confidence_score >= 1 AND confidence_score <= 100),
  related_team character varying,
  related_player character varying,
  data_sources ARRAY,
  generation_date date DEFAULT CURRENT_DATE,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT professor_lock_insights_pkey PRIMARY KEY (id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username text UNIQUE,
  email text,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  risk_tolerance text DEFAULT 'medium'::text CHECK (risk_tolerance = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  favorite_teams ARRAY DEFAULT '{}'::text[],
  favorite_players ARRAY DEFAULT '{}'::text[],
  preferred_bet_types ARRAY DEFAULT '{moneyline,spread,total}'::text[],
  preferred_sports ARRAY DEFAULT '{NBA,NFL}'::text[],
  preferred_bookmakers ARRAY DEFAULT '{}'::text[],
  subscription_tier text DEFAULT 'free'::text CHECK (subscription_tier = ANY (ARRAY['free'::text, 'pro'::text, 'elite'::text])),
  is_active boolean DEFAULT true,
  welcome_bonus_claimed boolean DEFAULT false,
  welcome_bonus_expires_at timestamp with time zone,
  push_token text,
  admin_role boolean DEFAULT false,
  notification_settings jsonb DEFAULT '{"ai_picks": true}'::jsonb,
  subscription_status text DEFAULT 'inactive'::text CHECK (subscription_status = ANY (ARRAY['active'::text, 'inactive'::text, 'cancelled'::text, 'expired'::text, 'past_due'::text])),
  subscription_expires_at timestamp with time zone,
  apple_receipt_data text,
  google_purchase_token text,
  sport_preferences jsonb DEFAULT '{"mlb": true, "ufc": false, "wnba": false}'::jsonb,
  subscription_plan_type text,
  revenuecat_customer_id text,
  subscription_product_id text,
  subscription_started_at timestamp with time zone,
  subscription_renewed_at timestamp with time zone,
  auto_renew_enabled boolean DEFAULT true,
  betting_style text DEFAULT 'balanced'::text CHECK (betting_style = ANY (ARRAY['conservative'::text, 'balanced'::text, 'aggressive'::text])),
  pick_distribution jsonb DEFAULT '{"auto": true}'::jsonb,
  max_daily_picks integer DEFAULT 20,
  preferred_confidence_range jsonb DEFAULT '{"max": 100, "min": 55}'::jsonb,
  trial_used boolean DEFAULT false,
  phone_number text,
  referral_code text,
  referred_by text,
  referral_discount_active boolean DEFAULT false,
  referral_discount_expires_at timestamp with time zone,
  referral_points integer DEFAULT 0,
  referral_points_pending integer DEFAULT 0,
  referral_points_lifetime integer DEFAULT 0,
  referral_trial_active boolean DEFAULT false,
  referral_trial_expires_at timestamp with time zone,
  referral_free_month_expires_at timestamp with time zone,
  referral_upgrade_expires_at timestamp with time zone,
  phone_verified boolean DEFAULT false,
  phone_verified_at timestamp with time zone,
  verification_attempts integer DEFAULT 0,
  last_verification_attempt timestamp with time zone,
  verification_method character varying,
  daily_chat_messages integer DEFAULT 0,
  last_chat_reset timestamp with time zone DEFAULT now(),
  chat_timezone text DEFAULT 'America/New_York'::text,
  base_subscription_tier character varying DEFAULT 'free'::character varying,
  temporary_tier_active boolean DEFAULT false,
  temporary_tier character varying,
  temporary_tier_expires_at timestamp with time zone,
  temporary_upgrade_expires_at timestamp with time zone,
  api_subscription_tier text DEFAULT 'free'::text,
  api_subscription_id text,
  api_monthly_limit integer DEFAULT 1000,
  api_current_usage integer DEFAULT 0,
  daily_ad_rewards_used integer NOT NULL DEFAULT 0,
  last_ad_reward_reset timestamp with time zone,
  ad_timezone text,
  day_pass_tier character varying,
  day_pass_expires_at timestamp with time zone,
  day_pass_granted_at timestamp with time zone,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.prop_type_mappings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  frontend_prop_name character varying NOT NULL,
  database_prop_key character varying NOT NULL,
  sport_key character varying NOT NULL,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT prop_type_mappings_pkey PRIMARY KEY (id)
);
CREATE TABLE public.referral_leads (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  referral_code text NOT NULL,
  ip_address text,
  user_agent text,
  utm_source text,
  utm_medium text,
  utm_campaign text,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT referral_leads_pkey PRIMARY KEY (id)
);
CREATE TABLE public.referral_rewards (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  referral_id uuid NOT NULL,
  user_id uuid NOT NULL,
  reward_type text NOT NULL,
  reward_description text NOT NULL,
  reward_value numeric,
  granted_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  status text DEFAULT 'active'::text CHECK (status = ANY (ARRAY['active'::text, 'used'::text, 'expired'::text])),
  CONSTRAINT referral_rewards_pkey PRIMARY KEY (id),
  CONSTRAINT referral_rewards_referral_id_fkey FOREIGN KEY (referral_id) REFERENCES public.referrals(id),
  CONSTRAINT referral_rewards_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.referrals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  referrer_id uuid NOT NULL,
  referred_user_id uuid NOT NULL,
  referral_code text NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'completed'::text, 'expired'::text, 'cancelled'::text])),
  reward_type text DEFAULT 'discount'::text CHECK (reward_type = ANY (ARRAY['discount'::text, 'bonus_time'::text, 'free_picks'::text])),
  reward_value numeric DEFAULT 25.00,
  reward_granted boolean DEFAULT false,
  subscription_completed_at timestamp with time zone,
  expires_at timestamp with time zone DEFAULT (now() + '30 days'::interval),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  completed_at timestamp with time zone,
  CONSTRAINT referrals_pkey PRIMARY KEY (id),
  CONSTRAINT referrals_referrer_id_fkey FOREIGN KEY (referrer_id) REFERENCES public.profiles(id),
  CONSTRAINT referrals_referred_user_id_fkey FOREIGN KEY (referred_user_id) REFERENCES public.profiles(id)
);
CREATE TABLE public.reward_catalog (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  reward_name character varying NOT NULL,
  reward_description text NOT NULL,
  points_cost integer NOT NULL,
  reward_type character varying NOT NULL CHECK (reward_type::text = ANY (ARRAY['temporary_upgrade'::character varying, 'bonus_picks'::character varying, 'feature_unlock'::character varying]::text[])),
  upgrade_tier character varying CHECK (upgrade_tier::text = ANY (ARRAY['pro'::character varying, 'elite'::character varying]::text[])),
  duration_hours integer,
  bonus_picks_count integer,
  feature_unlocks jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT reward_catalog_pkey PRIMARY KEY (id)
);
CREATE TABLE public.scrapy_news (
  id integer NOT NULL DEFAULT nextval('scrapy_news_id_seq'::regclass),
  title character varying NOT NULL,
  content text,
  url character varying UNIQUE,
  source character varying,
  published_date timestamp without time zone,
  scraped_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  teams ARRAY,
  players ARRAY,
  keywords ARRAY,
  sentiment_score numeric,
  relevance_score numeric,
  category character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT scrapy_news_pkey PRIMARY KEY (id)
);
CREATE TABLE public.scrapy_player_stats (
  id integer NOT NULL DEFAULT nextval('scrapy_player_stats_id_seq'::regclass),
  player_name character varying NOT NULL,
  team character varying,
  sport character varying,
  season character varying,
  game_date date,
  stat_type character varying,
  stat_value numeric,
  stat_context character varying,
  source_url character varying,
  scraped_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  data_quality_score numeric,
  verification_status character varying DEFAULT 'unverified'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT scrapy_player_stats_pkey PRIMARY KEY (id)
);
CREATE TABLE public.scrapy_team_performance (
  id integer NOT NULL DEFAULT nextval('scrapy_team_performance_id_seq'::regclass),
  team_name character varying NOT NULL,
  sport character varying,
  season character varying,
  game_date date,
  opponent character varying,
  performance_metric character varying,
  metric_value numeric,
  context character varying,
  source_url character varying,
  scraped_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  data_quality_score numeric,
  verification_status character varying DEFAULT 'unverified'::character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  is_active boolean DEFAULT true,
  created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT scrapy_team_performance_pkey PRIMARY KEY (id)
);
CREATE TABLE public.sports_config (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport_key character varying NOT NULL UNIQUE,
  sport_name character varying NOT NULL,
  is_active boolean DEFAULT true,
  season_type character varying,
  current_season character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT sports_config_pkey PRIMARY KEY (id)
);
CREATE TABLE public.sports_events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport text NOT NULL,
  league text NOT NULL,
  home_team text NOT NULL,
  away_team text NOT NULL,
  start_time timestamp with time zone NOT NULL,
  odds jsonb NOT NULL DEFAULT '{}'::jsonb,
  stats jsonb DEFAULT '{}'::jsonb,
  status text DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'live'::text, 'completed'::text, 'cancelled'::text, 'postponed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  external_event_id text UNIQUE,
  source text,
  sport_key character varying,
  home_team_id uuid,
  away_team_id uuid,
  venue character varying,
  venue_city character varying,
  weather_conditions jsonb DEFAULT '{}'::jsonb,
  period_scores jsonb DEFAULT '[]'::jsonb,
  final_home_score integer,
  final_away_score integer,
  attendance integer,
  broadcast_info jsonb DEFAULT '[]'::jsonb,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT sports_events_pkey PRIMARY KEY (id),
  CONSTRAINT sports_events_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key),
  CONSTRAINT sports_events_home_team_id_fkey FOREIGN KEY (home_team_id) REFERENCES public.teams(id),
  CONSTRAINT sports_events_away_team_id_fkey FOREIGN KEY (away_team_id) REFERENCES public.teams(id)
);
CREATE TABLE public.subscription_pricing (
  plan_key text NOT NULL,
  tier text NOT NULL CHECK (tier = ANY (ARRAY['pro'::text, 'elite'::text])),
  billing_period text NOT NULL CHECK (billing_period = ANY (ARRAY['weekly'::text, 'monthly'::text, 'yearly'::text, 'daypass'::text, 'lifetime'::text])),
  display_price numeric NOT NULL,
  currency_code text NOT NULL DEFAULT 'USD'::text,
  period_label text,
  auto_renew boolean NOT NULL DEFAULT true,
  apple_disclosure text,
  strike_through_multiplier numeric DEFAULT 2.00,
  show_in_modals boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT subscription_pricing_pkey PRIMARY KEY (plan_key)
);
CREATE TABLE public.support_requests (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  email text NOT NULL,
  subject text NOT NULL,
  message text NOT NULL,
  category text NOT NULL CHECK (category = ANY (ARRAY['technical'::text, 'billing'::text, 'account'::text, 'feature_request'::text, 'other'::text])),
  status text DEFAULT 'open'::text CHECK (status = ANY (ARRAY['open'::text, 'in_progress'::text, 'resolved'::text, 'closed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT support_requests_pkey PRIMARY KEY (id),
  CONSTRAINT support_requests_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.system_health_metrics (
  id integer NOT NULL DEFAULT nextval('system_health_metrics_id_seq'::regclass),
  metric_name character varying NOT NULL,
  metric_value numeric,
  metric_unit character varying,
  component character varying,
  recorded_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
  metadata jsonb DEFAULT '{}'::jsonb,
  alert_threshold_exceeded boolean DEFAULT false,
  CONSTRAINT system_health_metrics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.team_recent_stats (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  team_id uuid NOT NULL,
  team_name character varying NOT NULL,
  sport character varying NOT NULL,
  sport_key character varying NOT NULL,
  game_date date NOT NULL,
  opponent_team character varying NOT NULL,
  opponent_team_id uuid,
  is_home boolean NOT NULL DEFAULT false,
  team_score integer NOT NULL DEFAULT 0,
  opponent_score integer NOT NULL DEFAULT 0,
  game_result character varying NOT NULL CHECK (game_result::text = ANY (ARRAY['W'::character varying, 'L'::character varying, 'T'::character varying]::text[])),
  margin integer NOT NULL DEFAULT 0,
  spread_line numeric,
  spread_result character varying CHECK (spread_result::text = ANY (ARRAY['W'::character varying, 'L'::character varying, 'P'::character varying]::text[])),
  total_line numeric,
  total_result character varying CHECK (total_result::text = ANY (ARRAY['O'::character varying, 'U'::character varying, 'P'::character varying]::text[])),
  offensive_performance numeric,
  defensive_performance numeric,
  venue character varying,
  weather_conditions jsonb,
  external_game_id character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT team_recent_stats_pkey PRIMARY KEY (id),
  CONSTRAINT team_recent_stats_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id),
  CONSTRAINT team_recent_stats_opponent_team_id_fkey FOREIGN KEY (opponent_team_id) REFERENCES public.teams(id)
);
CREATE TABLE public.teams (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport_key character varying,
  team_key character varying NOT NULL UNIQUE,
  team_name character varying NOT NULL,
  team_abbreviation character varying,
  city character varying,
  conference character varying,
  division character varying,
  logo_url text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT teams_pkey PRIMARY KEY (id),
  CONSTRAINT teams_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid UNIQUE,
  risk_tolerance text CHECK (risk_tolerance = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  sports ARRAY DEFAULT '{}'::text[],
  bet_types ARRAY DEFAULT '{}'::text[],
  max_bet_size integer CHECK (max_bet_size > 0),
  notification_preferences jsonb DEFAULT '{"types": [], "frequency": "daily"}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  username text UNIQUE,
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_reward_claims (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  reward_id uuid NOT NULL,
  points_spent integer NOT NULL,
  claimed_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone,
  is_active boolean DEFAULT true,
  original_tier character varying,
  metadata jsonb,
  CONSTRAINT user_reward_claims_pkey PRIMARY KEY (id),
  CONSTRAINT user_reward_claims_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.profiles(id),
  CONSTRAINT user_reward_claims_reward_id_fkey FOREIGN KEY (reward_id) REFERENCES public.reward_catalog(id)
);
CREATE TABLE public.webhook_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  source text NOT NULL CHECK (source = ANY (ARRAY['apple'::text, 'google'::text])),
  event_type text NOT NULL,
  notification_data jsonb NOT NULL,
  processed boolean NOT NULL DEFAULT false,
  processed_at timestamp with time zone,
  user_id uuid,
  error_message text,
  retry_count integer DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  processing_started_at timestamp with time zone,
  revenuecat_customer_id text,
  subscription_event_type text,
  CONSTRAINT webhook_events_pkey PRIMARY KEY (id),
  CONSTRAINT webhook_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ai_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title character varying NOT NULL,
  description text NOT NULL,
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['trend'::character varying::text, 'value'::character varying::text, 'alert'::character varying::text, 'prediction'::character varying::text])),
  impact character varying NOT NULL CHECK (impact::text = ANY (ARRAY['high'::character varying::text, 'medium'::character varying::text, 'low'::character varying::text])),
  data jsonb,
  is_global boolean DEFAULT false,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_insights_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_trends (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  trend_text text NOT NULL,
  trend_type character varying NOT NULL CHECK (trend_type::text = ANY (ARRAY['player_prop'::character varying::text, 'team'::character varying::text])),
  sport character varying NOT NULL,
  confidence_score numeric NOT NULL CHECK (confidence_score >= 0 AND confidence_score <= 100),
  data jsonb,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_trends_pkey PRIMARY KEY (id)
);

CREATE TABLE public.ai_predictions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  match_teams character varying NOT NULL,
  pick character varying NOT NULL,
  odds character varying NOT NULL,
  confidence integer CHECK (confidence >= 0 AND confidence <= 100),
  sport character varying NOT NULL,
  event_time timestamp with time zone NOT NULL,
  reasoning text,
  value_percentage numeric,
  roi_estimate numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'cancelled'::character varying::text])),
  game_id character varying,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  bet_type character varying DEFAULT 'moneyline'::character varying,
  player_id uuid,
  prop_market_type character varying,
  line_value numeric,
  prediction_value numeric,
  is_parlay_leg boolean DEFAULT false,
  parlay_id uuid,
  CONSTRAINT ai_predictions_pkey PRIMARY KEY (id),
  CONSTRAINT ai_predictions_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id),
  CONSTRAINT ai_predictions_parlay_id_fkey FOREIGN KEY (parlay_id) REFERENCES public.parlays(id)
);
CREATE TABLE public.bet_history (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  prediction_id uuid,
  amount numeric CHECK (amount > 0::numeric),
  odds text NOT NULL,
  potential_payout numeric,
  result text CHECK (result = ANY (ARRAY['pending'::text, 'won'::text, 'lost'::text])),
  settled_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bet_history_pkey PRIMARY KEY (id),
  CONSTRAINT bet_history_prediction_id_fkey FOREIGN KEY (prediction_id) REFERENCES public.predictions(id),
  CONSTRAINT bet_history_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.betting_history (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  prediction_id uuid,
  bet_amount numeric NOT NULL,
  potential_payout numeric,
  actual_payout numeric,
  bet_type character varying NOT NULL,
  odds character varying NOT NULL,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'cancelled'::character varying::text, 'pushed'::character varying::text])),
  placed_at timestamp with time zone DEFAULT now(),
  settled_at timestamp with time zone,
  sportsbook character varying,
  bet_reference character varying,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT betting_history_pkey PRIMARY KEY (id),
  CONSTRAINT betting_history_prediction_id_fkey FOREIGN KEY (prediction_id) REFERENCES public.ai_predictions(id)
);
CREATE TABLE public.bookmakers (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  bookmaker_key character varying NOT NULL UNIQUE,
  bookmaker_name character varying NOT NULL,
  region character varying,
  is_active boolean DEFAULT true,
  affiliate_link text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT bookmakers_pkey PRIMARY KEY (id)
);
CREATE TABLE public.daily_insights (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title character varying NOT NULL,
  description text NOT NULL,
  type character varying NOT NULL CHECK (type::text = ANY (ARRAY['analysis'::character varying::text, 'alert'::character varying::text, 'value'::character varying::text, 'trend'::character varying::text, 'prediction'::character varying::text])),
  category character varying NOT NULL CHECK (category::text = ANY (ARRAY['analysis'::character varying::text, 'news'::character varying::text, 'injury'::character varying::text, 'weather'::character varying::text, 'line_movement'::character varying::text])),
  source character varying NOT NULL,
  impact character varying NOT NULL CHECK (impact::text = ANY (ARRAY['low'::character varying::text, 'medium'::character varying::text, 'high'::character varying::text])),
  tools_used jsonb,
  impact_score numeric,
  date date NOT NULL,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT daily_insights_pkey PRIMARY KEY (id)
);
CREATE TABLE public.game_totals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_id character varying NOT NULL,
  sport character varying NOT NULL,
  home_team character varying,
  away_team character varying,
  event_time timestamp with time zone,
  total_line numeric NOT NULL,
  over_odds character varying,
  under_odds character varying,
  sportsbook character varying,
  market_status character varying DEFAULT 'active'::character varying,
  actual_total numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT game_totals_pkey PRIMARY KEY (id)
);
CREATE TABLE public.historical_games (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_game_id character varying NOT NULL UNIQUE,
  sport character varying NOT NULL,
  league character varying NOT NULL,
  season character varying,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  game_date timestamp with time zone NOT NULL,
  home_score integer NOT NULL,
  away_score integer NOT NULL,
  ml_home_close numeric,
  ml_away_close numeric,
  spread_line_close numeric,
  spread_home_odds_close numeric,
  spread_away_odds_close numeric,
  total_line_close numeric,
  total_over_odds_close numeric,
  total_under_odds_close numeric,
  ml_home_open numeric,
  ml_away_open numeric,
  spread_line_open numeric,
  total_line_open numeric,
  venue character varying,
  attendance integer,
  weather_conditions jsonb,
  source character varying DEFAULT 'theodds_api'::character varying,
  ingested_at timestamp with time zone DEFAULT now(),
  CONSTRAINT historical_games_pkey PRIMARY KEY (id)
);
CREATE TABLE public.historical_odds (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  bookmaker_id uuid,
  market_type_id uuid,
  opening_line jsonb NOT NULL,
  closing_line jsonb NOT NULL,
  line_movements jsonb DEFAULT '[]'::jsonb,
  result character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT historical_odds_pkey PRIMARY KEY (id),
  CONSTRAINT historical_odds_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT historical_odds_market_type_id_fkey FOREIGN KEY (market_type_id) REFERENCES public.market_types(id),
  CONSTRAINT historical_odds_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id)
);
CREATE TABLE public.live_games (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_game_id character varying NOT NULL UNIQUE,
  sport character varying NOT NULL,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  event_time timestamp with time zone NOT NULL,
  odds jsonb,
  game_status character varying DEFAULT 'scheduled'::character varying,
  venue character varying,
  weather jsonb,
  injuries jsonb,
  line_movements jsonb,
  last_updated timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT live_games_pkey PRIMARY KEY (id)
);
CREATE TABLE public.market_types (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  market_key character varying NOT NULL UNIQUE,
  market_name character varying NOT NULL,
  market_category character varying,
  sport_key character varying,
  description text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT market_types_pkey PRIMARY KEY (id)
);
CREATE TABLE public.mlb_game_players (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_id uuid,
  player_id uuid,
  is_home_team boolean NOT NULL,
  game_date timestamp with time zone NOT NULL,
  home_team character varying NOT NULL,
  away_team character varying NOT NULL,
  home_team_abbrev character varying,
  away_team_abbrev character varying,
  player_team_abbrev character varying,
  predicted_hits double precision,
  predicted_home_runs double precision,
  predicted_rbis double precision,
  predicted_strikeouts double precision,
  confidence_score double precision,
  actual_hits integer,
  actual_home_runs integer,
  actual_rbis integer,
  actual_strikeouts integer,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT mlb_game_players_pkey PRIMARY KEY (id),
  CONSTRAINT mlb_game_players_game_id_fkey FOREIGN KEY (game_id) REFERENCES public.historical_games(id),
  CONSTRAINT mlb_game_players_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.mlb_team_lookup (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  team_name_original character varying NOT NULL UNIQUE,
  team_name_abbrev character varying NOT NULL,
  team_name_full character varying,
  city character varying,
  mascot character varying,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT mlb_team_lookup_pkey PRIMARY KEY (id)
);
CREATE TABLE public.model_performance (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  model_name character varying NOT NULL,
  model_version character varying NOT NULL,
  sport_key character varying,
  prediction_type character varying NOT NULL,
  evaluation_period daterange NOT NULL,
  total_predictions integer DEFAULT 0,
  correct_predictions integer DEFAULT 0,
  accuracy numeric,
  roi numeric,
  avg_confidence numeric,
  metrics jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT model_performance_pkey PRIMARY KEY (id),
  CONSTRAINT model_performance_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.odds_data (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  bookmaker_id uuid,
  market_type_id uuid,
  outcome_name character varying,
  outcome_price numeric,
  outcome_point numeric,
  implied_probability numeric,
  is_best_odds boolean DEFAULT false,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT odds_data_pkey PRIMARY KEY (id),
  CONSTRAINT odds_data_market_type_id_fkey FOREIGN KEY (market_type_id) REFERENCES public.market_types(id),
  CONSTRAINT odds_data_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id),
  CONSTRAINT odds_data_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id)
);
CREATE TABLE public.parlay_legs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  parlay_id uuid,
  leg_number integer NOT NULL,
  bet_type character varying NOT NULL,
  market_reference_id uuid,
  selection character varying NOT NULL,
  odds character varying NOT NULL,
  decimal_odds numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'pushed'::character varying::text])),
  game_info jsonb,
  player_info jsonb,
  result_value numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT parlay_legs_pkey PRIMARY KEY (id),
  CONSTRAINT parlay_legs_parlay_id_fkey FOREIGN KEY (parlay_id) REFERENCES public.parlays(id)
);
CREATE TABLE public.parlays (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  parlay_name character varying,
  total_legs integer NOT NULL,
  combined_odds character varying,
  decimal_odds numeric,
  stake_amount numeric,
  potential_payout numeric,
  status character varying DEFAULT 'pending'::character varying CHECK (status::text = ANY (ARRAY['pending'::character varying::text, 'won'::character varying::text, 'lost'::character varying::text, 'cancelled'::character varying::text, 'pushed'::character varying::text])),
  legs_won integer DEFAULT 0,
  legs_lost integer DEFAULT 0,
  legs_pending integer,
  is_same_game_parlay boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT parlays_pkey PRIMARY KEY (id)
);
CREATE TABLE public.player_game_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  player_id uuid,
  minutes_played numeric,
  stats jsonb NOT NULL,
  fantasy_points numeric,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_game_stats_pkey PRIMARY KEY (id),
  CONSTRAINT player_game_stats_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT player_game_stats_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_prop_markets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid,
  game_id character varying NOT NULL,
  market_type character varying NOT NULL,
  line_value numeric NOT NULL,
  over_odds character varying,
  under_odds character varying,
  sportsbook character varying,
  is_active boolean DEFAULT true,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_prop_markets_pkey PRIMARY KEY (id),
  CONSTRAINT player_prop_markets_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_prop_types (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  prop_key character varying NOT NULL UNIQUE,
  prop_name character varying NOT NULL,
  sport_key character varying,
  stat_category character varying,
  unit character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_prop_types_pkey PRIMARY KEY (id),
  CONSTRAINT player_prop_types_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.player_props (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  event_id uuid,
  player_name character varying NOT NULL,
  prop_type character varying NOT NULL,
  line double precision,
  over_odds double precision,
  under_odds double precision,
  bookmaker character varying,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_props_pkey PRIMARY KEY (id),
  CONSTRAINT player_props_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id)
);
CREATE TABLE public.player_props_odds (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  event_id uuid,
  player_id uuid,
  prop_type_id uuid,
  bookmaker_id uuid,
  line numeric NOT NULL,
  over_odds numeric,
  under_odds numeric,
  implied_prob_over numeric,
  implied_prob_under numeric,
  last_update timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_props_odds_pkey PRIMARY KEY (id),
  CONSTRAINT player_props_odds_prop_type_id_fkey FOREIGN KEY (prop_type_id) REFERENCES public.player_prop_types(id),
  CONSTRAINT player_props_odds_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id),
  CONSTRAINT player_props_odds_bookmaker_id_fkey FOREIGN KEY (bookmaker_id) REFERENCES public.bookmakers(id),
  CONSTRAINT player_props_odds_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_season_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  player_id uuid,
  season character varying NOT NULL,
  games_played integer DEFAULT 0,
  stats_avg jsonb NOT NULL,
  stats_total jsonb NOT NULL,
  recent_form jsonb DEFAULT '{}'::jsonb,
  home_away_splits jsonb DEFAULT '{}'::jsonb,
  opponent_splits jsonb DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_season_stats_pkey PRIMARY KEY (id),
  CONSTRAINT player_season_stats_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.player_statistics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  player_id uuid,
  game_id character varying,
  date date NOT NULL,
  sport character varying NOT NULL,
  season character varying,
  stats jsonb NOT NULL,
  game_context jsonb,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT player_statistics_pkey PRIMARY KEY (id),
  CONSTRAINT player_statistics_player_id_fkey FOREIGN KEY (player_id) REFERENCES public.players(id)
);
CREATE TABLE public.players (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  external_player_id character varying NOT NULL UNIQUE,
  name character varying NOT NULL,
  position character varying,
  team character varying,
  sport character varying NOT NULL,
  jersey_number integer,
  active boolean DEFAULT true,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  player_key character varying NOT NULL UNIQUE,
  player_name character varying NOT NULL,
  team_id uuid,
  sport_key character varying,
  status character varying DEFAULT 'active'::character varying,
  CONSTRAINT players_pkey PRIMARY KEY (id),
  CONSTRAINT players_team_id_fkey FOREIGN KEY (team_id) REFERENCES public.teams(id),
  CONSTRAINT players_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.predictions (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid,
  event_id uuid,
  sport text NOT NULL,
  matchup text NOT NULL,
  pick text NOT NULL,
  odds text NOT NULL,
  confidence numeric CHECK (confidence >= 0::numeric AND confidence <= 100::numeric),
  analysis text,
  created_at timestamp with time zone DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  status text DEFAULT 'pending'::text CHECK (status = ANY (ARRAY['pending'::text, 'won'::text, 'lost'::text])),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT predictions_pkey PRIMARY KEY (id),
  CONSTRAINT predictions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT predictions_event_id_fkey FOREIGN KEY (event_id) REFERENCES public.sports_events(id)
);
CREATE TABLE public.profiles (
  id uuid NOT NULL,
  username text UNIQUE,
  email text,
  avatar_url text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  risk_tolerance text DEFAULT 'medium'::text CHECK (risk_tolerance = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  favorite_teams ARRAY DEFAULT '{}'::text[],
  favorite_players ARRAY DEFAULT '{}'::text[],
  preferred_bet_types ARRAY DEFAULT '{moneyline,spread,total}'::text[],
  preferred_sports ARRAY DEFAULT '{NBA,NFL}'::text[],
  preferred_bookmakers ARRAY DEFAULT '{}'::text[],
  subscription_tier text DEFAULT 'free'::text CHECK (subscription_tier = ANY (ARRAY['free'::text, 'pro'::text])),
  is_active boolean DEFAULT true,
  CONSTRAINT profiles_pkey PRIMARY KEY (id),
  CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id)
);
CREATE TABLE public.sports_config (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport_key character varying NOT NULL UNIQUE,
  sport_name character varying NOT NULL,
  is_active boolean DEFAULT true,
  season_type character varying,
  current_season character varying,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT sports_config_pkey PRIMARY KEY (id)
);
CREATE TABLE public.sports_events (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport text NOT NULL,
  league text NOT NULL,
  home_team text NOT NULL,
  away_team text NOT NULL,
  start_time timestamp with time zone NOT NULL,
  odds jsonb NOT NULL DEFAULT '{}'::jsonb,
  stats jsonb DEFAULT '{}'::jsonb,
  status text DEFAULT 'scheduled'::text CHECK (status = ANY (ARRAY['scheduled'::text, 'live'::text, 'completed'::text, 'cancelled'::text, 'postponed'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  external_event_id text UNIQUE,
  source text,
  sport_key character varying,
  home_team_id uuid,
  away_team_id uuid,
  venue character varying,
  venue_city character varying,
  weather_conditions jsonb DEFAULT '{}'::jsonb,
  period_scores jsonb DEFAULT '[]'::jsonb,
  final_home_score integer,
  final_away_score integer,
  attendance integer,
  broadcast_info jsonb DEFAULT '[]'::jsonb,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT sports_events_pkey PRIMARY KEY (id),
  CONSTRAINT sports_events_away_team_id_fkey FOREIGN KEY (away_team_id) REFERENCES public.teams(id),
  CONSTRAINT sports_events_home_team_id_fkey FOREIGN KEY (home_team_id) REFERENCES public.teams(id),
  CONSTRAINT sports_events_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.strategy_performance (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  strategy_name character varying NOT NULL,
  sport character varying,
  date_from date NOT NULL,
  date_to date NOT NULL,
  total_bets integer DEFAULT 0,
  winning_bets integer DEFAULT 0,
  win_rate numeric,
  total_roi numeric,
  profit_loss numeric,
  kelly_optimal_stakes jsonb,
  backtest_results jsonb,
  confidence_intervals jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT strategy_performance_pkey PRIMARY KEY (id)
);
CREATE TABLE public.team_game_results (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  team character varying NOT NULL,
  season integer NOT NULL,
  game_date date NOT NULL,
  opponent character varying NOT NULL,
  result character varying,
  runs_scored integer,
  runs_allowed integer,
  record character varying,
  winning_pitcher character varying,
  losing_pitcher character varying,
  save_pitcher character varying,
  attendance integer,
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT team_game_results_pkey PRIMARY KEY (id)
);
CREATE TABLE public.team_season_stats (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  team_id character varying NOT NULL,
  season character varying NOT NULL,
  stats_avg jsonb NOT NULL DEFAULT '{}'::jsonb,
  updated_at timestamp with time zone DEFAULT now(),
  created_at timestamp with time zone DEFAULT now(),
  CONSTRAINT team_season_stats_pkey PRIMARY KEY (id)
);
CREATE TABLE public.team_totals (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  game_id character varying NOT NULL,
  team character varying NOT NULL,
  sport character varying NOT NULL,
  total_line numeric NOT NULL,
  over_odds character varying,
  under_odds character varying,
  sportsbook character varying,
  market_status character varying DEFAULT 'active'::character varying,
  actual_total numeric,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT team_totals_pkey PRIMARY KEY (id)
);
CREATE TABLE public.teams (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  sport_key character varying,
  team_key character varying NOT NULL UNIQUE,
  team_name character varying NOT NULL,
  team_abbreviation character varying,
  city character varying,
  conference character varying,
  division character varying,
  logo_url text,
  metadata jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT teams_pkey PRIMARY KEY (id),
  CONSTRAINT teams_sport_key_fkey FOREIGN KEY (sport_key) REFERENCES public.sports_config(sport_key)
);
CREATE TABLE public.user_preferences (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid UNIQUE,
  risk_tolerance text CHECK (risk_tolerance = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])),
  sports ARRAY DEFAULT '{}'::text[],
  bet_types ARRAY DEFAULT '{}'::text[],
  max_bet_size integer CHECK (max_bet_size > 0),
  notification_preferences jsonb DEFAULT '{"types": [], "frequency": "daily"}'::jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  username text UNIQUE,
  CONSTRAINT user_preferences_pkey PRIMARY KEY (id),
  CONSTRAINT user_preferences_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_statistics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  date date NOT NULL,
  total_picks integer DEFAULT 0,
  winning_picks integer DEFAULT 0,
  losing_picks integer DEFAULT 0,
  pending_picks integer DEFAULT 0,
  total_roi numeric DEFAULT 0,
  profit_loss numeric DEFAULT 0,
  win_streak integer DEFAULT 0,
  current_streak integer DEFAULT 0,
  total_bets_placed integer DEFAULT 0,
  metadata jsonb,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT user_statistics_pkey PRIMARY KEY (id)
);
The Assistant has just been updated to help you better!
You may now opt-in to share schema metadata and even logs for better results

Permission settings
what is realtime and could we be utilizing it more or no




Reasoned


Reasoned

search_docs

Reasoned

Checklist:

Clarify what Supabase Realtime is and core features
Give quick guidance on when to use each feature
Provide simple ways you might use it more
Supabase Realtime is a globally distributed WebSocket service for live updates and multiplayer features. It has three primitives:

Broadcast: ephemeral pub/sub messages between clients (low-latency chat, cursors, typing).
Presence: shared online/user state in a channel (who’s online, per-user state).
Postgres Changes: stream DB row changes to clients, filtered by RLS.
When to use what:

Default to Broadcast for most live UX; scale-friendly and simple authorization via Realtime channels.
Use Presence sparingly to show who’s online or shared state; it’s heavier, so throttle updates.
Use Postgres Changes when you truly need row-level DB events on clients; scales less than Broadcast.
Ways you could utilize it more:

Live collaboration UX: cursors/typing (Broadcast), “who’s here” (Presence).
In-app notifications: DB trigger -> realtime.broadcast_changes to push lightweight events to a private channel, and let clients fetch details on demand.
Live dashboards: subscribe to a “topic:<entity_id>” via Broadcast and update charts instantly.
Chats/messages: Broadcast for delivery; persist to DB separately.
For DB-driven updates at scale: emit from DB to a private channel, then have clients listen via Broadcast instead of subscribing to Postgres Changes directly.
If helpful, tell me your use case (e.g., chat, dashboards, multiplayer, notifications), and I’ll propose the exact channel structure, minimal RLS policy, and sample client code.

import OpenAI from 'openai';
import * as dotenv from 'dotenv';
import { createLogger } from '../../utils/logger';
import { supabase, supabaseAdmin } from '../../services/supabase/client';
import { webSearchPerformSearchTool } from '../tools/webSearch';
import { freeDataTeamNewsTool, freeDataInjuryReportsTool } from '../tools/freeDataSources';

dotenv.config();

const logger = createLogger('grokChatbot');
const XAI_API_KEY = process.env.XAI_API_KEY;

interface ChatMessage {
  role: 'user' | 'assistant';
  content: string;
  timestamp?: string;
}

interface ChatContext {
  screen?: string;
  selectedPick?: any;
  userPreferences?: any;
  userTier?: 'free' | 'pro';
  maxPicks?: number;
}

interface ChatRequest {
  message: string;
  userId: string;
  context: ChatContext;
  conversationHistory: ChatMessage[];
}

interface ChatResponse {
  message: string;
  toolsUsed: string[];
  processingTime: number;
  isStreaming?: boolean;
  streamId?: string;
}

/**
 * AI Chatbot Orchestrator - provides intelligent sports betting responses
 */
export class ChatbotOrchestrator {
  private openai: OpenAI;

  constructor() {
    if (!XAI_API_KEY) {
      logger.error('XAI_API_KEY not found in environment variables');
      throw new Error('XAI_API_KEY not found in environment variables');
    }

    this.openai = new OpenAI({
      apiKey: XAI_API_KEY,
      baseURL: "https://api.x.ai/v1",
    });
    logger.info('‚úÖ AI chatbot initialized');
  }

  /**
   * Process a chat message with streaming support
   */
  async processMessageStream(request: ChatRequest, onChunk: (chunk: string) => void, onEvent?: (event: any) => void): Promise<ChatResponse> {
    const startTime = Date.now();
    const toolsUsed: string[] = [];

    try {
      logger.info(`ü§ñ Processing streaming message: "${request.message}" for user ${request.userId}`);

      // Get current app data
      const appData = await this.getAppData(request.userId);
      
      // Determine if we need tools based on the message
      const needsTools = this.shouldUseTools(request.message);
      
      // Build the system prompt with current data
      const systemPrompt = this.buildSystemPrompt(appData, request.context);
      
      // Build conversation messages
      const messages = this.buildMessages(request, systemPrompt);

      let fullResponse = '';
      
      if (needsTools.useTools) {
        // Send contextual event with proper type and message
        if (onEvent) {
          let eventType = 'web_search';
          let searchMessage = 'Searching the web for latest information...';
          
          // Customize both event type and message based on intent
          if (needsTools.intent === 'news_search') {
            eventType = 'news_search';
            searchMessage = 'Scanning latest sports news and breaking developments...';
          } else if (needsTools.intent === 'team_analysis') {
            eventType = 'team_analysis';
            searchMessage = 'Gathering real-time team intel and injury reports...';
          } else if (needsTools.intent === 'odds_lookup') {
            eventType = 'odds_lookup';
            searchMessage = 'Checking current betting lines and odds movements...';
          } else if (needsTools.intent === 'insights_analysis') {
            eventType = 'insights_analysis';
            searchMessage = 'Analyzing today\'s Professor Lock insights...';
          }
          
          onEvent({ type: eventType, message: searchMessage });
        }
        
        // For tool usage, we can't stream until after tools are called
        const response = await this.processWithTools(messages, needsTools.intent, toolsUsed, appData);
        const responseText = this.extractResponseText(response);
        
        // Simulate streaming for tool responses
        const words = responseText.split(' ');
        for (let i = 0; i < words.length; i++) {
          const chunk = words[i] + (i < words.length - 1 ? ' ' : '');
          fullResponse += chunk;
          onChunk(chunk);
          await new Promise(resolve => setTimeout(resolve, 30)); // Small delay for effect
        }
      } else {
        // Stream the response in real-time
        const stream = await this.openai.chat.completions.create({
          model: "grok-3",
          max_tokens: 1000,
          messages: messages,
          temperature: 0.7,
          stream: true
        });

        for await (const chunk of stream) {
          const content = chunk.choices[0]?.delta?.content || '';
          if (content) {
            fullResponse += content;
            onChunk(content);
          }
        }
      }

      const processingTime = Date.now() - startTime;

      logger.info(`‚úÖ Streaming chat response completed in ${processingTime}ms, tools used: ${toolsUsed.join(', ') || 'none'}`);

      return {
        message: fullResponse,
        toolsUsed,
        processingTime,
        isStreaming: true
      };

    } catch (error) {
      logger.error(`‚ùå Error in streaming chat: ${error instanceof Error ? error.message : String(error)}`);
      const errorMessage = "I'm experiencing some technical difficulties right now. Please try again in a moment! üîß";
      onChunk(errorMessage);
      
      return {
        message: errorMessage,
        toolsUsed: [],
        processingTime: Date.now() - startTime,
        isStreaming: true
      };
    }
  }

  /**
   * Process a chat message with AI and tool access (non-streaming)
   */
  async processMessage(request: ChatRequest): Promise<ChatResponse> {
    const startTime = Date.now();
    const toolsUsed: string[] = [];

    try {
      logger.info(`ü§ñ Processing message: "${request.message}" for user ${request.userId}`);

      // Get current app data
      const appData = await this.getAppData(request.userId);
      
      // Determine if we need tools based on the message
      const needsTools = this.shouldUseTools(request.message);
      
      // Build the system prompt with current data
      const systemPrompt = this.buildSystemPrompt(appData, request.context);
      
      // Build conversation messages
      const messages = this.buildMessages(request, systemPrompt);

      let response;
      
      if (needsTools.useTools) {
        // Use AI with tools for complex queries
        response = await this.processWithTools(messages, needsTools.intent, toolsUsed, appData);
      } else {
        // Simple AI response for basic queries
        response = await this.openai.chat.completions.create({
          model: "grok-3",
          max_tokens: 1000,
          messages: messages,
          temperature: 0.7
        });
      }

      const responseText = this.extractResponseText(response);
      const processingTime = Date.now() - startTime;

      logger.info(`‚úÖ Chat response generated in ${processingTime}ms, tools used: ${toolsUsed.join(', ') || 'none'}`);

      return {
        message: responseText,
        toolsUsed,
        processingTime
      };

    } catch (error) {
      logger.error(`‚ùå Error in Grok chat: ${error instanceof Error ? error.message : String(error)}`);
      return {
        message: "I'm experiencing some technical difficulties. Please try again in a moment!",
        toolsUsed: [],
        processingTime: Date.now() - startTime
      };
    }
  }

  /**
   * Get the latest 20 AI predictions for parlay building
   */
  private async getLatest20Predictions() {
    try {
      logger.info('Fetching latest predictions for chatbot');
      
      // Get all predictions including player props
      const { data: predictions, error } = await supabaseAdmin
        .from('ai_predictions')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(20);

      logger.info(`Found ${predictions?.length || 0} predictions`);
      
      if (error) {
        logger.error(`Error fetching latest 20 predictions: ${error.message}`);
        return [];
      }

      return predictions || [];
    } catch (error) {
      logger.error(`Error in getLatest20Predictions: ${error}`);
      return [];
    }
  }

  /**
   * Get today's AI insights from daily_professor_insights table
   */
  private async getTodaysInsights() {
    try {
      logger.info('Fetching today\'s Professor Lock insights');
      
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const { data: insights, error } = await supabaseAdmin
        .from('daily_professor_insights')
        .select('*')
        .gte('created_at', today.toISOString())
        .order('confidence', { ascending: false })
        .limit(10);

      if (error) {
        logger.error(`Error fetching insights: ${error.message}`);
        return [];
      }

      logger.info(`Found ${insights?.length || 0} insights for today`);
      return insights || [];
    } catch (error) {
      logger.error(`Error in getTodaysInsights: ${error}`);
      return [];
    }
  }

  /**
   * Get upcoming games with odds
   */
  private async getUpcomingGamesWithOdds() {
    try {
      logger.info('Fetching upcoming games with odds');
      
      const now = new Date();
      const nextWeek = new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000);
      
      // Get upcoming games
      const { data: games, error: gamesError } = await supabaseAdmin
        .from('sports_events')
        .select(`
          *,
          home_team:teams!sports_events_home_team_id_fkey(name, abbreviation),
          away_team:teams!sports_events_away_team_id_fkey(name, abbreviation)
        `)
        .eq('status', 'scheduled')
        .gte('start_time', now.toISOString())
        .lte('start_time', nextWeek.toISOString())
        .order('start_time', { ascending: true })
        .limit(20);

      if (gamesError) {
        logger.error(`Error fetching games: ${gamesError.message}`);
        return [];
      }

      // Get odds for these games
      if (games && games.length > 0) {
        const eventIds = games.map(g => g.id);
        
        const { data: odds, error: oddsError } = await supabaseAdmin
          .from('odds_data')
          .select(`
            *,
            market_type:market_types(name, description),
            bookmaker:bookmakers(name)
          `)
          .in('event_id', eventIds)
          .eq('is_best_odds', true);

        if (!oddsError && odds) {
          // Attach odds to games
          return games.map(game => ({
            ...game,
            odds: odds.filter(o => o.event_id === game.id)
          }));
        }
      }

      return games || [];
    } catch (error) {
      logger.error(`Error in getUpcomingGamesWithOdds: ${error}`);
      return [];
    }
  }

  /**
   * Get current app data (enhanced with more sources)
   */
  private async getAppData(userId: string) {
    try {
      logger.info('Getting enhanced app data for chatbot');
      
      // Get today's AI predictions
      const { data: todaysPicks, error: picksError } = await supabaseAdmin
        .from('ai_predictions')
        .select('*')
        .order('created_at', { ascending: false })
        .limit(15);
      
      logger.info(`Found ${todaysPicks?.length || 0} picks for today`);

      // Get latest 20 predictions for parlay building
      const latest20Predictions = await this.getLatest20Predictions();

      // Separate team picks and player props
      const teamPicks = latest20Predictions.filter(p => 
        p.bet_type && ['spread', 'moneyline', 'total'].includes(p.bet_type.toLowerCase())
      );
      const playerProps = latest20Predictions.filter(p => 
        p.bet_type && p.bet_type.toLowerCase().includes('player')
      );

      logger.info(`Team picks: ${teamPicks.length}, Player props: ${playerProps.length}`);

      // Get today's insights
      const todaysInsights = await this.getTodaysInsights();

      // Get upcoming games with odds
      const upcomingGames = await this.getUpcomingGamesWithOdds();

      if (picksError) {
        logger.error(`Error fetching today's picks: ${picksError.message}`);
      }
      
      // Get recent injury reports
      let injuries: any[] = [];
      try {
        const { data: injuryData, error: injuryError } = await supabaseAdmin
          .from('injury_reports')
          .select('*')
          .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
          .order('created_at', { ascending: false })
          .limit(20);

        if (!injuryError && injuryData) {
          injuries = injuryData;
        }
      } catch (injuryError) {
        logger.warn(`Injury reports table not available: ${injuryError}`);
      }

      // Get recent news
      let news: any[] = [];
      try {
        const { data: newsData, error: newsError } = await supabaseAdmin
          .from('news')
          .select('*')
          .gte('created_at', new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString())
          .order('created_at', { ascending: false })
          .limit(15);

        if (!newsError && newsData) {
          news = newsData;
        }
      } catch (newsError) {
        logger.warn(`News table not available: ${newsError}`);
      }

      return {
        todaysPicks: todaysPicks || [],
        latest20Predictions: latest20Predictions,
        teamPicks: teamPicks,
        playerProps: playerProps,
        todaysInsights: todaysInsights,
        upcomingGames: upcomingGames,
        injuries: injuries,
        news: news,
        timestamp: new Date().toISOString()
      };

    } catch (error) {
      logger.error(`Error getting app data: ${error}`);
      return {
        todaysPicks: [],
        latest20Predictions: [],
        teamPicks: [],
        playerProps: [],
        todaysInsights: [],
        upcomingGames: [],
        injuries: [],
        news: [],
        timestamp: new Date().toISOString()
      };
    }
  }

  /**
   * Determine if the message needs tool usage (enhanced)
   */
  private shouldUseTools(message: string): { useTools: boolean; intent: string } {
    const lowerMessage = message.toLowerCase();

    // Tool-requiring patterns
    if (lowerMessage.includes('news') || 
        lowerMessage.includes('breaking') ||
        lowerMessage.includes('latest') ||
        lowerMessage.includes('search') ||
        lowerMessage.includes('what happened') ||
        lowerMessage.includes('recent') ||
        lowerMessage.includes('update')) {
      return { useTools: true, intent: 'news_search' };
    }

    // Team-specific analysis
    if (lowerMessage.includes('injury') ||
        lowerMessage.includes('injured') ||
        lowerMessage.includes('roster') ||
        lowerMessage.includes('lineup') ||
        lowerMessage.includes('trade') ||
        lowerMessage.includes('weather')) {
      return { useTools: true, intent: 'team_analysis' };
    }

    // Odds and lines lookup
    if (lowerMessage.includes('odds') ||
        lowerMessage.includes('line') ||
        lowerMessage.includes('spread') ||
        lowerMessage.includes('total') ||
        lowerMessage.includes('o/u') ||
        lowerMessage.includes('current price')) {
      return { useTools: true, intent: 'odds_lookup' };
    }

    // Daily insights analysis
    if (lowerMessage.includes('insight') ||
        lowerMessage.includes('research') ||
        lowerMessage.includes('analysis') ||
        lowerMessage.includes('deep dive')) {
      return { useTools: true, intent: 'insights_analysis' };
    }

    // Specific team mentions that might need current info
    const teams = ['dodgers', 'yankees', 'lakers', 'warriors', 'celtics', 'chiefs', 'bills', 'heat', 'nuggets'];
    if (teams.some(team => lowerMessage.includes(team)) && 
        (lowerMessage.includes('should') || lowerMessage.includes('bet') || lowerMessage.includes('play'))) {
      return { useTools: true, intent: 'team_analysis' };
    }

    return { useTools: false, intent: 'conversational' };
  }

  /**
   * Build system prompt with current app data (enhanced)
   */
  private buildSystemPrompt(appData: any, context: ChatContext): string {
    const picksCount = appData.todaysPicks.length;
    const teamPicksCount = appData.teamPicks.length;
    const playerPropsCount = appData.playerProps.length;
    const insightsCount = appData.todaysInsights.length;
    const upcomingGamesCount = appData.upcomingGames.length;
    const injuriesCount = appData.injuries.length;
    const newsCount = appData.news.length;
    
    // Determine user tier and pick limits
    const userTier = context.userTier || 'free';
    const maxPicks = context.maxPicks || 2;
    const isProUser = userTier === 'pro';
    
    // Filter picks based on user tier
    const allowedPicks = appData.todaysPicks.slice(0, maxPicks);
    const displayPicksCount = isProUser ? picksCount : Math.min(picksCount, maxPicks);

    return `You are "Professor Lock" - the most advanced AI sports betting assistant. You're sharp, witty, and slightly cocky, but always back it up with data and intelligence. You adapt your personality naturally - sometimes funny, sometimes serious, always professional.

CORE IDENTITY:
üéØ Sharp, intelligent, and adaptable
üí∞ Expert in value betting and bankroll management
üé≤ Master of parlays and advanced betting strategies
üòé Confident with a sense of humor - can be a smartass when appropriate
üìä Data-driven but explains complex concepts simply

COMMUNICATION MASTERY:
‚Ä¢ **NATURAL ADDRESSING**: Rotate these smoothly:
  - Universal: "champ", "legend", "ace", "genius", "winner", "MVP"
  - Context-based: Use betting context only when appropriate ("whale", "handicapper", "high roller", "underdog", "dog", "favorite", etc.)
  - Personality-based: Match their energy (casual = "friend", serious = "champion", etc.)
‚Ä¢ **GAMBLING VERNACULAR**: Weave in naturally:
  - "lock", "chalk", "dog", "fade", "juice", "sharp money", "public play", "whale", "handicapper", "action", "hedging", "teaser", "moneyline", "spread", "total", "player prop", etc.
  - "steam", "reverse line movement", "closing line value", "bad beat", etc.
‚Ä¢ **ADAPTIVE PERSONALITY TRIGGERS**:
  - Big win mentioned = Congratulatory but grounded
  - Bad beat mentioned = Empathetic with recovery advice
  - Question about strategy = Professor mode (detailed but engaging)
  - Casual chat = Friend mode (relaxed, funny)
  - Anything else you come up with for this
‚Ä¢ **CONVERSATION FLOW**: Always lead with their energy level, then add your expertise

${isProUser ? 'üåü PRO USER - Full access to all features and data' : `
üîí FREE TIER USER:
‚ö†Ô∏è Limited to ${maxPicks} picks when asked for recommendations
‚ö†Ô∏è Mention Pro benefits naturally when relevant (not pushy)
‚ö†Ô∏è Focus on value within their limits
`}

CURRENT DATA OVERVIEW:
üìä ${displayPicksCount} picks available${isProUser ? '' : ` (Free tier: showing ${maxPicks})`}
üéØ ${teamPicksCount} team picks | ${playerPropsCount} player props ready
üí° ${insightsCount} Professor Lock insights analyzed today
üèüÔ∏è ${upcomingGamesCount} upcoming games with live odds
üè• ${injuriesCount} injury updates | üì∞ ${newsCount} news stories

TOP PICKS SNAPSHOT:
${allowedPicks.slice(0, 3).map((pick: any, i: number) => 
  `${i+1}. ${pick.match_teams}: ${pick.pick} (${pick.confidence}% confidence)`
).join('\n')}

PARLAY INTELLIGENCE:
You have access to ${appData.latest20Predictions.length} recent predictions:
- ${teamPicksCount} team-based picks (ML, spread, totals)
- ${playerPropsCount} player props (points, rebounds, assists, etc.)

When building parlays:
‚úÖ Analyze risk tolerance from user's request
‚úÖ Mix bet types intelligently (don't just pick highest confidence)
‚úÖ Consider correlation (avoid same-game conflicts)
‚úÖ 2-leg "safe" = 75%+ confidence picks
‚úÖ 3-4 leg "balanced" = mix of 65-80% confidence
‚úÖ "Risky/lottery" = include some 60-70% dogs for value
‚úÖ ALWAYS include both team picks AND player props when available
‚úÖ Explain WHY each leg makes sense

ADVANCED FEATURES:
${insightsCount > 0 ? `
üìà TODAY'S INSIGHTS: ${appData.todaysInsights.slice(0, 3).map((i: any) => 
  `${i.title} (${i.impact} impact)`
).join(' | ')}
` : ''}

${upcomingGamesCount > 0 ? `
üéÆ LIVE ODDS AVAILABLE: Can check current lines and movements
` : ''}

PROFESSOR LOCK'S INTELLIGENCE PLAYBOOK:
1. **READ THE ROOM** - Match their energy: excited = hype them up, cautious = build confidence
2. **DATA > OPINIONS** - "I like" becomes "The numbers show" or "Sharp money says", etc.
3. **ANTICIPATE** - If they ask about Dodgers, mention injury report before they ask - just as one example
4. **EDGE EXPLANATION** - Never just say "take this", explain WHY it's profitable
5. **NEWS RADAR** - Use tools when something feels off or outdated
6. **BRUTAL HONESTY** - "This is a coin flip" beats fake confidence
7. **BANKROLL WISDOM** - Gently steer away from stupid bet sizes
8. **VALUE HUNTING** - Always mention if a line has moved or if timing matters

TOOL USAGE INTELLIGENCE:
‚Ä¢ Web search: Breaking news, trades, weather, specific team updates
‚Ä¢ Insights: When discussing strategy or deep analysis
‚Ä¢ Odds lookup: For line shopping or current prices
‚Ä¢ Combine tools for comprehensive answers

RESPONSE EXCELLENCE:
üéØ **BE CONCISE** - Lead with impact, cut the fluff
üí¨ **2-4 sentences max** for most responses (unless complex data requested)
üî• **Hook + Value + Action** - Every response should follow this formula
üí∞ **Bold the money** - **All picks, odds, and key numbers** in bold
‚ö° **Quick wit** - Drop clever one-liners when appropriate
üìä Use bullets when needed and format things well when needed - not for every single thing
üé≤ Always end with a specific next move or question

**RESPONSE TEMPLATES:** (You don't have to use these exactly, use them as inspiration)
‚Ä¢ Quick Pick: "**[Team] [Bet]** is my [confidence level] play. [One-line reason]. Want the full breakdown?"
‚Ä¢ Parlay: "Built you a [type] parlay: [legs in bold]. [Total odds]. [Risk level + why]. Sound good?"
‚Ä¢ Analysis: "[Hot take]. [Key stat/trend]. [Actionable insight]. What's your angle?"
‚Ä¢ Banter: "[Witty response]. [Value]. [Next step]."

**PROFESSOR LOCK'S GOLDEN RULES:**
üéØ **Sharp, not wordy** - Every word counts
üß† **Smart, not show-offy** - Intelligence through clarity
üòè **Witty and funny, not cringe** - Timing beats trying too hard
üí∞ **Profitable, not just right** - Focus on value over being perfect
ü§ù **Helpful, not pushy** - Guide, don't pressure

You're the sharp, slightly cocky, and witty betting guru who backs up every pick and analysis with logic. Be the advisor they trust AND enjoy talking to.`;
  }

  /**
   * Build conversation messages for Grok
   */
  private buildMessages(request: ChatRequest, systemPrompt: string) {
    const messages: any[] = [];

    // Add system message first (Grok uses system role)
    messages.push({
      role: 'system',
      content: systemPrompt
    });

    // Add conversation history
    request.conversationHistory.forEach(msg => {
      messages.push({
        role: msg.role,
        content: msg.content
      });
    });

    // Add current user message
    messages.push({
      role: 'user',
      content: request.message
    });

    return messages;
  }

  /**
   * Process message with tools (enhanced with more intelligence)
   */
  private async processWithTools(messages: any[], intent: string, toolsUsed: string[], appData: any) {
    logger.info(`üîß Using tools for intent: ${intent}`);

    // Enhanced tools with more capabilities
    const tools: OpenAI.Chat.Completions.ChatCompletionTool[] = [
      {
        type: "function" as const,
        function: {
          name: "web_search",
          description: "Search the web for current sports information, breaking news, trades, injuries, weather, or any real-time updates. Use specific queries with team names, player names, and relevant keywords.",
          parameters: {
            type: "object",
            properties: {
              query: {
                type: "string",
                description: "Specific search query with relevant keywords (e.g., 'Lakers injury report today', 'Yankees starting pitcher weather', 'NFL trade deadline news')"
              }
            },
            required: ["query"]
          }
        }
      },
      {
        type: "function" as const,
        function: {
          name: "get_team_news",
          description: "Get recent news and updates for a specific team",
          parameters: {
            type: "object",
            properties: {
              teamName: {
                type: "string",
                description: "Name of the team"
              },
              sport: {
                type: "string",
                description: "Sport (NBA, NFL, MLB, NHL)"
              }
            },
            required: ["teamName", "sport"]
          }
        }
      },
      {
        type: "function" as const,
        function: {
          name: "analyze_daily_insights",
          description: "Access Professor Lock's daily research insights for deep analysis on games, trends, and betting opportunities",
          parameters: {
            type: "object",
            properties: {
              category: {
                type: "string",
                description: "Category to filter by: weather, injury, pitcher, bullpen, trends, matchup, research, or all"
              },
              teams: {
                type: "array",
                items: { type: "string" },
                description: "Optional: specific teams to filter insights for"
              }
            },
            required: ["category"]
          }
        }
      },
      {
        type: "function" as const,
        function: {
          name: "check_live_odds",
          description: "Get current betting lines and odds for specific games or teams",
          parameters: {
            type: "object",
            properties: {
              gameId: {
                type: "string",
                description: "Optional: specific game ID"
              },
              teams: {
                type: "array",
                items: { type: "string" },
                description: "Team names to check odds for"
              },
              betType: {
                type: "string",
                description: "Type of bet: spread, moneyline, total, all"
              }
            },
            required: ["betType"]
          }
        }
      }
    ];

    try {
      const response = await this.openai.chat.completions.create({
        model: "grok-3",
        max_tokens: 1500,
        messages: messages,
        tools: tools,
        tool_choice: "auto"
      });

      // Check if AI used tools
      const message = response.choices[0].message;
      if (message.tool_calls && message.tool_calls.length > 0) {
        const toolMessages: any[] = [];

        for (const toolCall of message.tool_calls) {
          let toolResult;
          
          if (toolCall.function.name === 'web_search') {
            toolsUsed.push('web_search');
            const args = JSON.parse(toolCall.function.arguments);
            toolResult = await webSearchPerformSearchTool(args.query);
          } else if (toolCall.function.name === 'get_team_news') {
            toolsUsed.push('team_news');
            const args = JSON.parse(toolCall.function.arguments);
            toolResult = await freeDataTeamNewsTool.func(args.teamName, args.sport);
          } else if (toolCall.function.name === 'analyze_daily_insights') {
            toolsUsed.push('daily_insights');
            const args = JSON.parse(toolCall.function.arguments);
            // Filter and return relevant insights
            const filteredInsights = appData.todaysInsights.filter((insight: any) => {
              if (args.category !== 'all' && insight.category !== args.category) return false;
              if (args.teams && args.teams.length > 0) {
                return args.teams.some((team: string) => 
                  insight.teams?.includes(team) || 
                  insight.title?.toLowerCase().includes(team.toLowerCase()) ||
                  insight.description?.toLowerCase().includes(team.toLowerCase())
                );
              }
              return true;
            });
            toolResult = {
              insights: filteredInsights,
              count: filteredInsights.length,
              categories: [...new Set(filteredInsights.map((i: any) => i.category))]
            };
          } else if (toolCall.function.name === 'check_live_odds') {
            toolsUsed.push('live_odds');
            const args = JSON.parse(toolCall.function.arguments);
            // Filter games and odds based on request
            const relevantGames = appData.upcomingGames.filter((game: any) => {
              if (args.gameId && game.id !== args.gameId) return false;
              if (args.teams && args.teams.length > 0) {
                return args.teams.some((team: string) => 
                  game.home_team?.name?.toLowerCase().includes(team.toLowerCase()) ||
                  game.away_team?.name?.toLowerCase().includes(team.toLowerCase())
                );
              }
              return true;
            });
            toolResult = {
              games: relevantGames.map((game: any) => ({
                id: game.id,
                matchup: `${game.away_team?.name} @ ${game.home_team?.name}`,
                startTime: game.start_time,
                odds: game.odds?.filter((o: any) => 
                  args.betType === 'all' || o.market_type?.name?.toLowerCase().includes(args.betType)
                ) || []
              })),
              timestamp: new Date().toISOString()
            };
          }

          toolMessages.push({
            tool_call_id: toolCall.id,
            role: "tool",
            content: JSON.stringify(toolResult)
          });
        }

        // Get final response with tool results
        const finalResponse = await this.openai.chat.completions.create({
          model: "grok-3",
          max_tokens: 1500,
          messages: [
            ...messages,
            message,
            ...toolMessages
          ]
        });

        return finalResponse;
      }

      return response;

    } catch (error) {
      logger.error(`Error with tools: ${error}`);
      // Fallback to simple response
      return await this.openai.chat.completions.create({
        model: "grok-3",
        max_tokens: 1000,
        messages: messages,
        temperature: 0.7
      });
    }
  }

  /**
   * Extract text from AI response
   */
  private extractResponseText(response: any): string {
    if (response.choices && response.choices[0] && response.choices[0].message && response.choices[0].message.content) {
      return response.choices[0].message.content;
    }
    
    // Handle multiple content blocks (legacy)
    if (response.content && Array.isArray(response.content)) {
      return response.content
        .filter((block: any) => block.type === 'text')
        .map((block: any) => block.text)
        .join('');
    }

    return "I'm having trouble processing that request right now. Please try again!";
  }
} 
version: '3.8'

# ðŸš€ Optimal ParleyApp Production Stack
# This is the recommended Docker setup for production deployment

services:
  # Redis Cache (First - others depend on it)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backend API Server
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile.production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      - THEODDS_API_KEY=${THEODDS_API_KEY}
      - AUTOMATION_SECRET=${AUTOMATION_SECRET}
      - PYTHON_ML_SERVER_URL=http://ml-server:8001
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      ml-server:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./scripts:/app/scripts  # Include scripts for automation
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'

  # ML Prediction Server
  ml-server:
    build: 
      context: ./python-services/sports-betting-api
      dockerfile: Dockerfile.production
    ports:
      - "8001:8001"
    environment:
      - PYTHON_ML_SERVER=true
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_KEY=${SUPABASE_SERVICE_KEY}
      - PORT=8001
      - REDIS_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_started
    volumes:
      - ml_models:/app/models
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.5'

  # Daily Automation Scheduler
  automation:
    build:
      context: .
      dockerfile: Dockerfile.automation
    environment:
      - PROJECT_ROOT=/app
      - BACKEND_URL=http://backend:3000
      - AUTOMATION_SECRET=${AUTOMATION_SECRET}
      - TZ=America/New_York  # Set timezone for cron
    depends_on:
      backend:
        condition: service_healthy
      ml-server:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - automation_logs:/app/automation-logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Monitoring Stack (Optional but Recommended)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    profiles: ["monitoring"]

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles: ["monitoring"]

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend
    restart: unless-stopped
    profiles: ["production"]

volumes:
  redis_data:
    driver: local
  ml_models:
    driver: local
  automation_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: parleyapp-production
    driver: bridge 